/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package homeLibrary.ui;

import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import homeLibrary.entity.*;
import homeLibrary.util.HibernateUtil;
import javax.swing.JOptionPane;
/**
 *
 * @author Admin
 */
public class createBookFrame extends javax.swing.JFrame {

    /**
     * Creates new form createBookFrame
     */
    public createBookFrame() {
        initComponents();
    }
    private String BOOK_NAME;
    private String[] AUTHORS_NAME;
    private static String QUERY_BASED_ON_AUTHOR_NAME = "from Authors a where a.authorName like '%";
    private static String QUERY_BASED_ON_BOOK_NAME = "from Books a where a.bookName = '";
    
    public Authors AuthorFindExequteQuery(String aName){
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(QUERY_BASED_ON_AUTHOR_NAME+aName+"%'");
            List authorLst =(List) q.list();
            for (Object o: authorLst){
                Authors author = (Authors) o;
                if (author.getAuthorName().equals("") || author.getAuthorName() == null){
                    session.close();
                    return null;
                }
                session.close();
                return author;
            }
        }
        catch (HibernateException he) {
            he.printStackTrace();
        }        
        HibernateUtil.getSessionFactory().close();
        return null;
    }
    
    public boolean BookFindExequteQuery(String aName){
        try {
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(QUERY_BASED_ON_BOOK_NAME+aName+"'");
            return !q.list().isEmpty();
        }
        catch (HibernateException he) {
            he.printStackTrace();
        }        
        HibernateUtil.getSessionFactory().close();
        return false;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addBookField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addAuthorField = new javax.swing.JTextField();
        addBookButton = new javax.swing.JButton();
        addAuthorButton = new javax.swing.JButton();
        confirmAuthorButton = new javax.swing.JButton();
        addToLibraryButton = new javax.swing.JButton();
        bookNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        authorsTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onCreateBookClose(evt);
            }
        });

        addBookField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("Created book");

        jLabel2.setText("Created book author");

        addAuthorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorFieldActionPerformed(evt);
            }
        });

        addBookButton.setText("Add Book");
        addBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookButtonActionPerformed(evt);
            }
        });

        addAuthorButton.setText("Add author");
        addAuthorButton.setEnabled(false);
        addAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAuthorButtonActionPerformed(evt);
            }
        });

        confirmAuthorButton.setText("Confirm");
        confirmAuthorButton.setEnabled(false);
        confirmAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAuthorButtonActionPerformed(evt);
            }
        });

        addToLibraryButton.setText("Add to Library");
        addToLibraryButton.setEnabled(false);
        addToLibraryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToLibraryButtonActionPerformed(evt);
            }
        });

        authorsTextArea.setEditable(false);
        authorsTextArea.setColumns(10);
        authorsTextArea.setRows(3);
        authorsTextArea.setAutoscrolls(false);
        jScrollPane1.setViewportView(authorsTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToLibraryButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(51, 51, 51))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(addBookField, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addAuthorField, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addAuthorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                            .addComponent(bookNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(confirmAuthorButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addAuthorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addBookField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addAuthorButton)
                            .addComponent(addBookButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bookNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmAuthorButton)
                    .addComponent(addToLibraryButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addAuthorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addAuthorFieldActionPerformed

    private void addBookFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addBookFieldActionPerformed

    private void addBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookButtonActionPerformed
        if (!addBookField.getText().trim().equals("")){
            addAuthorButton.setEnabled(true);
            confirmAuthorButton.setEnabled(true);
            BOOK_NAME = addBookField.getText();
            bookNameLabel.setText(BOOK_NAME);
        }
    }//GEN-LAST:event_addBookButtonActionPerformed

    private void onCreateBookClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onCreateBookClose
        addToLibraryButton.setEnabled(false);
        addAuthorButton.setEnabled(false);
        confirmAuthorButton.setEnabled(false);
    }//GEN-LAST:event_onCreateBookClose

    private void addAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAuthorButtonActionPerformed
        if (!addAuthorField.getText().equals("")){            
            if(authorsTextArea.getText().equals("")){
                authorsTextArea.setText(addAuthorField.getText());                
            }
            else{
                authorsTextArea.setText(authorsTextArea.getText()+"\n"+addAuthorField.getText());
            }
        }
    }//GEN-LAST:event_addAuthorButtonActionPerformed

    private void confirmAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAuthorButtonActionPerformed
        AUTHORS_NAME = authorsTextArea.getText().split("\n");
        addToLibraryButton.setEnabled(true);
    }//GEN-LAST:event_confirmAuthorButtonActionPerformed

    private void addToLibraryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToLibraryButtonActionPerformed
        Session session = null;
        try{
        session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        BooksAuthors booksAuth;
        if (BookFindExequteQuery(BOOK_NAME)){
            JOptionPane.showMessageDialog(null, "This book name is exist. Please change another book name.");
        }
        else{
            Books book = new Books(BOOK_NAME,"in stock");
            Authors author;
            for(int i=0;i<AUTHORS_NAME.length;i++)
            {       
                if (AUTHORS_NAME[i].trim().isEmpty()){
                    AUTHORS_NAME[i]="Unknow author";
                }
                Authors authFind = AuthorFindExequteQuery(AUTHORS_NAME[i]);
                if (authFind!=null){
                    author = authFind;
                    session.update(author);
                }
                else{
                    author = new Authors(AUTHORS_NAME[i]);
                    session.save(author);
                }
                booksAuth = new BooksAuthors(book, author);                                    
                session.save(book);            
                session.save(booksAuth);
            }        
            session.getTransaction().commit();
        }
        }
        catch (Exception e) {
            System.out.println(e.getMessage());
            if (session != null) session.getTransaction().rollback();
        } 
        finally {
            if (session != null && session.isOpen()) { 
                session.close();
            }
        }
    }//GEN-LAST:event_addToLibraryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void showFrame() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createBookFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createBookFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAuthorButton;
    private javax.swing.JTextField addAuthorField;
    private javax.swing.JButton addBookButton;
    private javax.swing.JTextField addBookField;
    private javax.swing.JButton addToLibraryButton;
    private javax.swing.JTextArea authorsTextArea;
    private javax.swing.JLabel bookNameLabel;
    private javax.swing.JButton confirmAuthorButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
