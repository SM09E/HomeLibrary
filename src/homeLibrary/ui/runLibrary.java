/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package homeLibrary.ui;

import homeLibrary.entity.Authors;
import homeLibrary.entity.Books;
import homeLibrary.entity.BooksAuthors;
import homeLibrary.util.HibernateUtil;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Admin
 */
public class runLibrary extends javax.swing.JFrame {
    

    /**
     * Creates new form runLibrary
     */
    public runLibrary() {
        initComponents();        
    }
    private static String QUERY_RETURNS_ALL_BOOKS="from Books";
    private static String QUERY_FOR_FIND_ONE_BOOK="from Books b where b.bookName like '";
    private static String QUERY_FOR_FIND_AUTHORS_BY_BOOKS = "select b.authors from BooksAuthors b where b.books.bookId = ";
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        outputButton = new javax.swing.JButton();
        createBookButton = new javax.swing.JButton();
        deleteBookButton = new javax.swing.JButton();
        GiveRetrieveToggleButton = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home Library");
        setResizable(false);

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        resultTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultTable.setShowVerticalLines(false);
        resultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultTableSelectBook(evt);
            }
        });
        jScrollPane1.setViewportView(resultTable);

        outputButton.setText("Output all books");
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        createBookButton.setText("Create book");
        createBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBookButtonActionPerformed(evt);
            }
        });

        deleteBookButton.setText("Delete book");
        deleteBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBookButtonActionPerformed(evt);
            }
        });

        GiveRetrieveToggleButton.setSelected(true);
        GiveRetrieveToggleButton.setText("Give book");
        GiveRetrieveToggleButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                switchBookStatus(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(outputButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(createBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBookButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GiveRetrieveToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(outputButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createBookButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteBookButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GiveRetrieveToggleButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        excuteFindAllBooksQuery();
        
    }//GEN-LAST:event_outputButtonActionPerformed

    private void createBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBookButtonActionPerformed
        createBookFrame.showFrame();
    }//GEN-LAST:event_createBookButtonActionPerformed

    private void deleteBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBookButtonActionPerformed
        Books book = getSelectedBook(getSelectedBookName());
        if (book!=null){
            BooksAuthors booksAuthors = null;
            String query = "from BooksAuthors b where b.books.bookId = "+book.getBookId();
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query q = session.createQuery(query);
            List lst = q.list();
            for (Object o: lst){
                booksAuthors = (BooksAuthors) o;
                session.delete(booksAuthors);
            }
            session.delete(book);
            session.getTransaction().commit();
            session.close();
        }
    }//GEN-LAST:event_deleteBookButtonActionPerformed

    private void resultTableSelectBook(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultTableSelectBook
        String bookName = getSelectedBookName();
        String bookStatus = getSelectedBookStatus().trim();
        
        if (bookStatus.equals("given")){
            GiveRetrieveToggleButton.setSelected(true);
            GiveRetrieveToggleButton.setText("Retrieve book");
        }
        else if (bookStatus.equals("in stock")){
            GiveRetrieveToggleButton.setSelected(false);
            GiveRetrieveToggleButton.setText("Give book");
        }        
    }//GEN-LAST:event_resultTableSelectBook

    private void switchBookStatus(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_switchBookStatus
        Books book = getSelectedBook(getSelectedBookName());
        if (book!=null){            
            Session session = HibernateUtil.getSessionFactory().openSession();
            if (GiveRetrieveToggleButton.isSelected()){
                book.setBookStatus("given");
                GiveRetrieveToggleButton.setText("Retrieve book");
            }
            else{
                book.setBookStatus("in stock");
                GiveRetrieveToggleButton.setText("Give book");
            }

            session.beginTransaction();
            session.update(book);
            session.getTransaction().commit();
            session.close();    
        }
    }//GEN-LAST:event_switchBookStatus

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(runLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(runLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(runLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(runLibrary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new runLibrary().setVisible(true);
            }
        });
       
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton GiveRetrieveToggleButton;
    private javax.swing.JButton createBookButton;
    private javax.swing.JButton deleteBookButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton outputButton;
    private javax.swing.JTable resultTable;
    // End of variables declaration//GEN-END:variables

    
    //Method to display the data obtained from queries
    public void displayResult(Vector tableData) {
        Vector<String> tableHeaders = new Vector<>();
        //Vector tableData = new Vector();
        tableHeaders.add("Book Name");
        tableHeaders.add("Author Name");
        tableHeaders.add("Book Status");
        resultTable.setModel(new DefaultTableModel(tableData, tableHeaders));                
    }
    
    public String getSelectedBookName(){
        try{
            return (String) resultTable.getValueAt(resultTable.getSelectedRow(), 0);
        }
        catch(Exception e){
            return null;
        }
    }
    
    public String getSelectedBookStatus(){
        try{
            return (String) resultTable.getValueAt(resultTable.getSelectedRow(), 2);
        }
        catch(Exception e){
            return null;
        }
    }
    
    //Select book for delete or swich status
    public Books getSelectedBook(String bookName){
        //resultTable.getValueAt(resultTable.getSelectedRow(), 0);
        Books book = null;
        try{
           Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();            
            Query booksQuery = session.createQuery(QUERY_FOR_FIND_ONE_BOOK+bookName+"'");          
            book = (Books) booksQuery.uniqueResult();
            session.getTransaction().commit();
            session.close();
        }
        catch(HibernateException he){}
        if (book!=null){
            return book;
        }
        return null;
    }
    //Heavy method for adequate output a list of books, authors and book statuses
    public void excuteFindAllBooksQuery(){
        try{
           
            Session session = HibernateUtil.getSessionFactory().openSession();
            session.beginTransaction();
            Query booksQuery = session.createQuery(QUERY_RETURNS_ALL_BOOKS);
            List booksList = booksQuery.list();
            Vector  tableData = new Vector();
            for(Object o: booksList){
                Books book = (Books) o;
                String iterAuthorsQuery = QUERY_FOR_FIND_AUTHORS_BY_BOOKS+book.getBookId().toString();
                Query tableAuthorQuery = session.createQuery(iterAuthorsQuery);
                List authorsList = tableAuthorQuery.list();
                Vector<String> bookRow = new Vector<String>();
                Authors author = (Authors) authorsList.get(0);
                bookRow.add(book.getBookName());
                bookRow.add(author.getAuthorName());
                if (authorsList.size()>1){
                    for (int i = 1; i<authorsList.size(); i++){
                        author = (Authors) authorsList.get(i);
                        bookRow.add(1, bookRow.elementAt(1)+", "+author.getAuthorName());
                        bookRow.remove(2);
                    }
                }
                bookRow.add(book.getBookStatus());
                tableData.add(bookRow);
                
            }
            
            displayResult(tableData);
            //session.getTransaction().commit();
            session.close();
        }
        catch(HibernateException he){
            he.printStackTrace();
        }
    }
    
}
